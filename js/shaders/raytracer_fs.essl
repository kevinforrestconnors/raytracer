shaderSource[document.currentScript.src.split('js/shaders/')[1]] = `

	precision highp float;

	varying vec3 viewDir;
	varying vec3 worldNormal;
	varying vec2 texCoord;

	uniform sampler2D colorTexture; 
	uniform samplerCube envMapTexture;
	uniform vec3 eyePos;
	uniform mat4 quadrics[80];

	float snoise(vec3 r) {

	  vec3 s = vec3(7502, 22777, 4767); // quasi-random seed

	  float f = 0.0;

	  for(int i=0; i<16; i++) {

		    // add a bunch of quasi-random sines

		    f += sin( dot(s, r) / 65536.0);

		    // generate next quasi-random

		    s = mod(s, 32768.0) * 2.0 + floor(s / 32768.0);

		}

  		return f / 32.0 + 0.5; // result between 0 and 1

	}

	vec3 snoiseGrad(vec3 r) {

	  	vec3 s = vec3(7502, 22777, 4767); // quasi-random seed

	  	vec3 f = vec3(0.0, 0.0, 0.0);

	  	for(int i=0; i<16; i++) {

	    // add derivatives of quasi-random sines

	    f += cos( dot(s, r) / 65536.0) * s;

	    // generate next quasi-random

	    s = mod(s, 32768.0) * 2.0 + floor(s / 32768.0);

		}

	  return f / 65536.0;

	}

	float rand(vec2 co){
    	return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
	}	

	float intersectQuadric(mat4 A, mat4 B, vec4 e, vec4 d, int index) {
		float a = dot(d, A * d);
		float b = dot(d, A * e) + dot(e, A * d);
		float c = dot(e, A * e);
		float t1;
		float t2;

		float discriminant = (b * b) - (4.0 * a * c);

		if (discriminant < 0.0) {
			return -1.0;
		} else {
			t1 = ((-1.0 * b) + sqrt(discriminant)) / (2.0 * a);
			t2 = ((-1.0 * b) - sqrt(discriminant)) / (2.0 * a);

			vec4 ray1 = e + d * t1;
			vec4 ray2 = e + d * t2;

			if (index == 14 || index == 15 || index == 16 || index == 18 || index == 19 || index == 20) {
				if (dot(ray1 * B, ray1) > 0.0 || rand(vec2(ray1.x, ray1.z)) > 0.95) {
					t1 = -1.0;
				}

				if (dot(ray2 * B, ray2) > 0.0 || rand(vec2(ray2.x, ray2.z)) > 0.95) {
					t2 = -1.0;
				}
			} else {
				if (dot(ray1 * B, ray1) > 0.0) {
					t1 = -1.0;
				}

				if (dot(ray2 * B, ray2) > 0.0) {
					t2 = -1.0;
				}
			}	



			if (t1 < 0.0 && t2 < 0.0) {
				return -1.0;
			} else if (t1 < 0.0) {
				return t2;
			} else if (t2 < 0.0) {
				return t1;
			} else if (t1 < t2) {
				return t1;
			} else {
				return t2;
			}
		}


	}

	bool findBestHit(vec4 eR, vec4 dR, out float bestT, out mat4 coeffMatrix, out vec3 bestColor, out vec3 bestKS, out int index) {

		bestT = 9999.0;

		mat4 A;
		mat4 B;

		for (int i = 0; i < 40; i++) {
			A = quadrics[2 * i];
			B = quadrics[2 * i + 1];

			float tempT = intersectQuadric(A, B, eR, dR, i);

			if (tempT > 0.0 && tempT < bestT) {
				bestT = tempT;
				coeffMatrix = A;
				bestColor = vec3(1, 1, 1);
				bestKS = vec3(0.1, 0.1, 0.1);
				index = i;

				if (i == 1) {
					bestColor = vec3(1, 1, 1);
				} else if (i == 2) {
					bestColor = vec3(1, 1, 1);
				} else if (i == 3) {
					bestColor = vec3(0.1, 0.1, 0.1);
				} else if (i == 4) {
					bestColor = vec3(0.1, 0.1, 0.1);
				} else if (i == 5) {
					bestColor = vec3(.93, .57, .13);
				} else if (i == 8) {
					bestColor = vec3(.61, .16, 0);
				} else if (i == 9) {
					bestColor = vec3(1, .63, 0);
					bestKS = vec3(1.5, 1.5, 1.5);
				} else if (i == 10) {
					bestColor = vec3(1, .63, 0);
					bestKS = vec3(1.5, 1.5, 1.5);
				} else if (i == 11) {
					bestColor = vec3(1, .63, 0);
					bestKS = vec3(1.5, 1.5, 1.5);
				} else if (i == 12) {
					bestColor = vec3(1, .63, 0);
					bestKS = vec3(1.5, 1.5, 1.5);
				} else if (i == 13) {
					bestColor = vec3(1, .63, 0);
					bestKS = vec3(1.5, 1.5, 1.5);
				} else if (i == 14) {
					bestColor = vec3(0, .8, 0);
				} else if (i == 15) {
					bestColor = vec3(0, .8, 0);
				} else if (i == 16) {
					bestColor = vec3(0, .8, 0);
				} else if (i == 17) {
					bestColor = vec3(.51, .32, 0);
				} else if (i == 18) {
					bestColor = vec3(0, .8, 0);
				} else if (i == 19) {
					bestColor = vec3(0, .8, 0);
				} else if (i == 20) {
					bestColor = vec3(0, .8, 0);
				} else if (i == 21) {
					bestColor = vec3(.51, .32, 0);
				}
				
			}
			
		}

		return bestT > 0.0 && bestT < 9999.0;

	}

	vec3 shade(vec3 normal, vec3 viewDir, vec3 lightDir, vec3 lightPowerDensity, vec3 ks, float shininess, vec3 kd)  {
    	float cosTheta = dot(normal, normalize(lightDir));

    	if(cosTheta < 0.0) {
        	return vec3(0,0,0);
      	}

      	vec3 diffuse = kd * cosTheta * lightPowerDensity;

    	vec3 halfway = normalize(viewDir + lightDir);
    	float cosDelta = dot(normal, halfway);

    	if(cosDelta < 0.0) {
      		return diffuse;
    	} else {

    		return diffuse + (lightPowerDensity * ks * pow(cosDelta, shininess));
    	}
  	}

	void main(void) {

		vec4 e = vec4(eyePos, 1);
		vec4 d = vec4(viewDir, 0);

		mat4 coeffMatrix;

		float bestHit;
		vec3 normal;

		vec3 bestColor;
		vec3 bestColor1;
		vec3 bestKS;

		int index1;
		int index2;

		if (findBestHit(e, d, bestHit, coeffMatrix, bestColor, bestKS, index1)) {

			vec4 worldPosition = e + d * bestHit;
			normal = normalize((worldPosition * coeffMatrix).xyz);

			vec4 directionalArray[2];

			vec4 directional0 = vec4(normalize(vec3(-5,14,-5)),0);
			vec4 directional1 = vec4(normalize(vec3(10,10,-5)),0);

			directionalArray[0] = directional0;
			directionalArray[1] = directional1;

			vec3 powerDensityArray[2];
			vec3 powerDensity0 = vec3(1,1,1);
			vec3 powerDensity1 = vec3(1,1,1);

			powerDensityArray[0] = powerDensity0;
			powerDensityArray[1] = powerDensity1;

			vec3 thisKS = vec3(0,0,0);
			vec3 shading;
			vec3 shadingResult = vec3(0,0,0);
			vec3 thisKD = vec3(1,1,1);

			float shininess = 20.0;

			for(int i = 0; i < 2; i++) {

				if(findBestHit(worldPosition + vec4(normal * 0.001, 0), directionalArray[i], bestHit, coeffMatrix, bestColor1, bestKS, index2)) {
					//shadows
	 				shading = vec3(0,0,0);
				} else {
					// not shadows
					//oranges
					if (index1 >= 9 && index1 <= 13) {
						shading = shade(normalize(normal.xyz) + snoiseGrad(normal.xyz * 40.0) * 0.01, -viewDir, directionalArray[i].xyz, powerDensityArray[i], bestKS, shininess, bestColor);
					} else {
						shading = shade(normal.xyz, -viewDir, directionalArray[i].xyz, powerDensityArray[i], bestKS, shininess, bestColor);
					}
					
    			}
    			shadingResult += shading;
    		}

			gl_FragColor = vec4(shadingResult, 1);
		} else {
			gl_FragColor = textureCube(envMapTexture, viewDir);
		}

	}
  
`;